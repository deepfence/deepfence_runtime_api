import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


def stop_node_scan(api_url, default_headers):
    # Enumerate nodes
    enumerate_response = requests.post(
        "{0}/enumerate".format(api_url),
        json={"filters": {"type": ["host", "container_image"], "pseudo": False,
                          "vulnerability_scan_status": ["queued"]}, "size": 100000},
        headers=default_headers, verify=False).json()
    nodes_list = []
    enumerate_response_nodes = enumerate_response.get("data", {}).get("data", [])
    if not enumerate_response_nodes:
        return
    for node in enumerate_response_nodes:
        nodes_list.append(node["id"])
    post_data = {"action": "cve_scan_stop", "node_type": "host", "node_id_list": nodes_list, "action_args": {}}
    print("\nStopping all host and container scans")
    print(requests.post("{0}/node_action".format(api_url),
                        json=post_data, headers=default_headers, verify=False).json())


def stop_registry_scans(api_url, default_headers, registry_id, registry_type):
    # Enumerate registries
    enumerate_response = requests.post(
        "{0}/enumerate".format(api_url),
        json={"filters": {"type": ["registry_image"], "vulnerability_scan_status": ["queued"]},
              "size": 200000, "registry_id": registry_id},
        headers=default_headers, verify=False).json()
    image_name_with_tag_list = []
    enumerate_response_nodes = enumerate_response.get("data", {}).get("data", [])
    if not enumerate_response_nodes:
        return
    for node in enumerate_response_nodes:
        image_name_with_tag_list.append(node["image_name_with_tag"])
    print("\nStopping {0} registry scans", registry_type)
    post_data = {"action": "cve_scan_stop", "node_type": "registry_image", "registry_images": {
        "image_name_with_tag_list": image_name_with_tag_list, "registry_id": registry_id}}
    print(requests.post("{0}/node_action".format(api_url),
                        json=post_data, headers=default_headers, verify=False).json())


def stop_vulnerability_scan(api_url, api_key):
    # Auth
    default_headers = {"Content-Type": "application/json"}
    auth_response = requests.post("{0}/users/auth".format(api_url), json={"api_key": api_key}, headers=default_headers,
                                  verify=False).json()
    if auth_response["success"]:
        print("Authentication successful")
    else:
        print("Authentication failed")
        return
    default_headers["Authorization"] = "Bearer " + auth_response["data"]["access_token"]

    stop_node_scan(api_url, default_headers)
    registries = requests.get("{0}/vulnerability/container_image_registry".format(api_url),
                              headers=default_headers, verify=False).json().get("data", {})
    for registry in registries:
        stop_registry_scans(api_url, default_headers, registry["id"], registry["registry_type"])


if __name__ == '__main__':
    import sys

    if len(sys.argv) != 3:
        print("Usage: python3 stop_vulnerability_scan.py <mgmt_console_ip_address> <api_key>")
        exit(1)
    stop_vulnerability_scan("https://{0}/deepfence/v1.5".format(sys.argv[1]), sys.argv[2])
