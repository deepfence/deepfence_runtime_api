import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


def start_cve_scan(api_url, api_key, tags, interval):
    # Auth
    default_headers = {"Content-Type": "application/json"}
    auth_response = requests.post("{0}/users/auth".format(api_url), json={"api_key": api_key}, headers=default_headers,
                                  verify=False).json()
    if auth_response["success"]:
        print("Authentication successful")
    else:
        print("Authentication failed")
        return
    default_headers["Authorization"] = "Bearer " + auth_response["data"]["access_token"]

    # Enumerate nodes
    enumerate_response = requests.post(
        "{0}/enumerate".format(api_url),
        json={"filters": {"type": ["host"], "user_defined_tags": [tags], "pseudo": False}, "size": 50000},
        headers=default_headers, verify=False).json()
    nodes_list = []
    counter = 0
    enumerate_response_nodes = enumerate_response.get("data", {}).get("data", [])
    if not enumerate_response_nodes:
        print("No nodes found")
        return
    for node in enumerate_response_nodes:
        node_name = "{0} (host)".format(node.get("host_name", ""))
        nodes_list.append({"id": node["id"], "node_name": node_name})
        counter += 1

    print("Total number of hosts found with given tag: {0}".format(counter))
    scan_type = ["base", "java", "js", "nodejs", "ruby", "python", "php", "dotnet"]
    post_data = {
        "action": "schedule_vulnerability_scan",
        "node_type": "host",
        "node_id_list": [n["id"] for n in nodes_list],
        "action_args": {
            "cron": "0 0 */{0} * *".format(interval),
            "resources": [],
            "scan_type": scan_type,
        },
    }

    try:
        response = requests.post("{0}/node_action".format(api_url), headers=default_headers,
                                 verify=False, json=post_data)
        print(response.text)
    except:
        print("Error in api call")


if __name__ == '__main__':
    import sys

    if len(sys.argv) != 5:
        print(
            "Usage: python3 schedule_vulnerability_scan_tag.py <mgmt_console_ip_address> <api_key> <tag> <interval in days>")
        exit(1)
    start_cve_scan("https://{0}/deepfence/v1.5".format(sys.argv[1]), sys.argv[2], sys.argv[3], sys.argv[4])
