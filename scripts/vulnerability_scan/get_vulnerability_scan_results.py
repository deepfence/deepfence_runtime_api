import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import csv
import io

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


def get_cve_scan_results(api_url, api_key, image_name):
    # Auth
    default_headers = {"Content-Type": "application/json"}
    auth_response = requests.post("{0}/users/auth".format(api_url), json={"api_key": api_key}, headers=default_headers,
                                  verify=False).json()
    if auth_response["success"]:
        print("Authentication successful")
    else:
        print("Authentication failed")
        return
    default_headers["Authorization"] = "Bearer " + auth_response["data"]["access_token"]

    cve_response = requests.post(
        "{0}/vulnerability".format(api_url),
        json={"filters": {"cve_container_image": [image_name]}, "size": 10000},
        headers=default_headers, verify=False).json()

    cve_response_data = cve_response.get("data", [])
    if not cve_response_data:
        print("No vulnerabilities found in {0}".format(image_name))
        return
    cve_file_name = "vulnerability_scan_results.csv"
    with io.open(cve_file_name, mode='w', encoding='utf-8') as results_file:
        csv_writer = csv.writer(results_file)
        count = 0
        for cve_resp in cve_response_data:
            if count == 0:
                header = cve_resp.keys()
                csv_writer.writerow(header)
                count += 1
            csv_writer.writerow(cve_resp.values())
        results_file.close()
        print("Vulnerabilities saved to {0}".format(cve_file_name))


if __name__ == '__main__':
    import sys

    if len(sys.argv) != 4:
        print("Usage: python3 get_vulnerability_scan_results.py <mgmt_console_ip_address> <api_key> <image_name / host_name>")
        exit(1)
    get_cve_scan_results("https://{0}/deepfence/v1.5".format(sys.argv[1]), sys.argv[2], sys.argv[3])
