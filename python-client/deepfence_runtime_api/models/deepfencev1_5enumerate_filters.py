# coding: utf-8

"""
    Deepfence Runtime API v1.5

    Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider, container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.  # noqa: E501

    OpenAPI spec version: 1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Deepfencev15enumerateFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'container_name': 'list[str]',
        'host_name': 'list[str]',
        'image_name': 'list[str]',
        'interface_names': 'list[str]',
        'kernel_version': 'list[str]',
        'kubernetes_namespace': 'list[str]',
        'kubernetes_node_type': 'list[str]',
        'local_networks': 'list[str]',
        'os': 'list[str]',
        'packet_capture': 'list[str]',
        'pid': 'int',
        'ppid': 'int',
        'pseudo': 'list[bool]',
        'public_ip_address': 'list[str]',
        'type': 'list[str]'
    }

    attribute_map = {
        'container_name': 'container_name',
        'host_name': 'host_name',
        'image_name': 'image_name',
        'interface_names': 'interfaceNames',
        'kernel_version': 'kernel_version',
        'kubernetes_namespace': 'kubernetes_namespace',
        'kubernetes_node_type': 'kubernetes_node_type',
        'local_networks': 'local_networks',
        'os': 'os',
        'packet_capture': 'packet_capture',
        'pid': 'pid',
        'ppid': 'ppid',
        'pseudo': 'pseudo',
        'public_ip_address': 'publicIpAddress',
        'type': 'type'
    }

    def __init__(self, container_name=None, host_name=None, image_name=None, interface_names=None, kernel_version=None, kubernetes_namespace=None, kubernetes_node_type=None, local_networks=None, os=None, packet_capture=None, pid=None, ppid=None, pseudo=None, public_ip_address=None, type=None):  # noqa: E501
        """Deepfencev15enumerateFilters - a model defined in Swagger"""  # noqa: E501

        self._container_name = None
        self._host_name = None
        self._image_name = None
        self._interface_names = None
        self._kernel_version = None
        self._kubernetes_namespace = None
        self._kubernetes_node_type = None
        self._local_networks = None
        self._os = None
        self._packet_capture = None
        self._pid = None
        self._ppid = None
        self._pseudo = None
        self._public_ip_address = None
        self._type = None
        self.discriminator = None

        if container_name is not None:
            self.container_name = container_name
        if host_name is not None:
            self.host_name = host_name
        if image_name is not None:
            self.image_name = image_name
        if interface_names is not None:
            self.interface_names = interface_names
        if kernel_version is not None:
            self.kernel_version = kernel_version
        if kubernetes_namespace is not None:
            self.kubernetes_namespace = kubernetes_namespace
        if kubernetes_node_type is not None:
            self.kubernetes_node_type = kubernetes_node_type
        if local_networks is not None:
            self.local_networks = local_networks
        if os is not None:
            self.os = os
        if packet_capture is not None:
            self.packet_capture = packet_capture
        if pid is not None:
            self.pid = pid
        if ppid is not None:
            self.ppid = ppid
        if pseudo is not None:
            self.pseudo = pseudo
        if public_ip_address is not None:
            self.public_ip_address = public_ip_address
        if type is not None:
            self.type = type

    @property
    def container_name(self):
        """Gets the container_name of this Deepfencev15enumerateFilters.  # noqa: E501

        Container name (for type `container`, `container_image`)  # noqa: E501

        :return: The container_name of this Deepfencev15enumerateFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this Deepfencev15enumerateFilters.

        Container name (for type `container`, `container_image`)  # noqa: E501

        :param container_name: The container_name of this Deepfencev15enumerateFilters.  # noqa: E501
        :type: list[str]
        """

        self._container_name = container_name

    @property
    def host_name(self):
        """Gets the host_name of this Deepfencev15enumerateFilters.  # noqa: E501

        Host names  # noqa: E501

        :return: The host_name of this Deepfencev15enumerateFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this Deepfencev15enumerateFilters.

        Host names  # noqa: E501

        :param host_name: The host_name of this Deepfencev15enumerateFilters.  # noqa: E501
        :type: list[str]
        """

        self._host_name = host_name

    @property
    def image_name(self):
        """Gets the image_name of this Deepfencev15enumerateFilters.  # noqa: E501

        Container image names (for type `container`, `container_image`)  # noqa: E501

        :return: The image_name of this Deepfencev15enumerateFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this Deepfencev15enumerateFilters.

        Container image names (for type `container`, `container_image`)  # noqa: E501

        :param image_name: The image_name of this Deepfencev15enumerateFilters.  # noqa: E501
        :type: list[str]
        """

        self._image_name = image_name

    @property
    def interface_names(self):
        """Gets the interface_names of this Deepfencev15enumerateFilters.  # noqa: E501

        Interface names (for type `host`)  # noqa: E501

        :return: The interface_names of this Deepfencev15enumerateFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._interface_names

    @interface_names.setter
    def interface_names(self, interface_names):
        """Sets the interface_names of this Deepfencev15enumerateFilters.

        Interface names (for type `host`)  # noqa: E501

        :param interface_names: The interface_names of this Deepfencev15enumerateFilters.  # noqa: E501
        :type: list[str]
        """

        self._interface_names = interface_names

    @property
    def kernel_version(self):
        """Gets the kernel_version of this Deepfencev15enumerateFilters.  # noqa: E501

        Kernel version (for type `host`)  # noqa: E501

        :return: The kernel_version of this Deepfencev15enumerateFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._kernel_version

    @kernel_version.setter
    def kernel_version(self, kernel_version):
        """Sets the kernel_version of this Deepfencev15enumerateFilters.

        Kernel version (for type `host`)  # noqa: E501

        :param kernel_version: The kernel_version of this Deepfencev15enumerateFilters.  # noqa: E501
        :type: list[str]
        """

        self._kernel_version = kernel_version

    @property
    def kubernetes_namespace(self):
        """Gets the kubernetes_namespace of this Deepfencev15enumerateFilters.  # noqa: E501

        kubernetes namespace (for type `pod`, `kube_controller`, `kube_service`). Empty means all.  # noqa: E501

        :return: The kubernetes_namespace of this Deepfencev15enumerateFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._kubernetes_namespace

    @kubernetes_namespace.setter
    def kubernetes_namespace(self, kubernetes_namespace):
        """Sets the kubernetes_namespace of this Deepfencev15enumerateFilters.

        kubernetes namespace (for type `pod`, `kube_controller`, `kube_service`). Empty means all.  # noqa: E501

        :param kubernetes_namespace: The kubernetes_namespace of this Deepfencev15enumerateFilters.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["default", "", "kube-public", "kube-system"]  # noqa: E501
        if not set(kubernetes_namespace).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `kubernetes_namespace` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(kubernetes_namespace) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._kubernetes_namespace = kubernetes_namespace

    @property
    def kubernetes_node_type(self):
        """Gets the kubernetes_node_type of this Deepfencev15enumerateFilters.  # noqa: E501

        kubernetes node type (for type `kube_controller`)  # noqa: E501

        :return: The kubernetes_node_type of this Deepfencev15enumerateFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._kubernetes_node_type

    @kubernetes_node_type.setter
    def kubernetes_node_type(self, kubernetes_node_type):
        """Sets the kubernetes_node_type of this Deepfencev15enumerateFilters.

        kubernetes node type (for type `kube_controller`)  # noqa: E501

        :param kubernetes_node_type: The kubernetes_node_type of this Deepfencev15enumerateFilters.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Deployment", "DaemonSet", "ReplicaSet", "CronJob", "StatefulSet"]  # noqa: E501
        if not set(kubernetes_node_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `kubernetes_node_type` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(kubernetes_node_type) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._kubernetes_node_type = kubernetes_node_type

    @property
    def local_networks(self):
        """Gets the local_networks of this Deepfencev15enumerateFilters.  # noqa: E501

        Local networks in CIDR format (for type `host`)  # noqa: E501

        :return: The local_networks of this Deepfencev15enumerateFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_networks

    @local_networks.setter
    def local_networks(self, local_networks):
        """Sets the local_networks of this Deepfencev15enumerateFilters.

        Local networks in CIDR format (for type `host`)  # noqa: E501

        :param local_networks: The local_networks of this Deepfencev15enumerateFilters.  # noqa: E501
        :type: list[str]
        """

        self._local_networks = local_networks

    @property
    def os(self):
        """Gets the os of this Deepfencev15enumerateFilters.  # noqa: E501

        Operating system (for type `host`)  # noqa: E501

        :return: The os of this Deepfencev15enumerateFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this Deepfencev15enumerateFilters.

        Operating system (for type `host`)  # noqa: E501

        :param os: The os of this Deepfencev15enumerateFilters.  # noqa: E501
        :type: list[str]
        """

        self._os = os

    @property
    def packet_capture(self):
        """Gets the packet_capture of this Deepfencev15enumerateFilters.  # noqa: E501

        Packet capture state (for type `host`)  # noqa: E501

        :return: The packet_capture of this Deepfencev15enumerateFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._packet_capture

    @packet_capture.setter
    def packet_capture(self, packet_capture):
        """Sets the packet_capture of this Deepfencev15enumerateFilters.

        Packet capture state (for type `host`)  # noqa: E501

        :param packet_capture: The packet_capture of this Deepfencev15enumerateFilters.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["running", "not_running"]  # noqa: E501
        if not set(packet_capture).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `packet_capture` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(packet_capture) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._packet_capture = packet_capture

    @property
    def pid(self):
        """Gets the pid of this Deepfencev15enumerateFilters.  # noqa: E501

        Process ID (for type `process`)  # noqa: E501

        :return: The pid of this Deepfencev15enumerateFilters.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this Deepfencev15enumerateFilters.

        Process ID (for type `process`)  # noqa: E501

        :param pid: The pid of this Deepfencev15enumerateFilters.  # noqa: E501
        :type: int
        """
        if pid is not None and pid < 1:  # noqa: E501
            raise ValueError("Invalid value for `pid`, must be a value greater than or equal to `1`")  # noqa: E501

        self._pid = pid

    @property
    def ppid(self):
        """Gets the ppid of this Deepfencev15enumerateFilters.  # noqa: E501

        Parent process ID (for type `process`)  # noqa: E501

        :return: The ppid of this Deepfencev15enumerateFilters.  # noqa: E501
        :rtype: int
        """
        return self._ppid

    @ppid.setter
    def ppid(self, ppid):
        """Sets the ppid of this Deepfencev15enumerateFilters.

        Parent process ID (for type `process`)  # noqa: E501

        :param ppid: The ppid of this Deepfencev15enumerateFilters.  # noqa: E501
        :type: int
        """
        if ppid is not None and ppid < 1:  # noqa: E501
            raise ValueError("Invalid value for `ppid`, must be a value greater than or equal to `1`")  # noqa: E501

        self._ppid = ppid

    @property
    def pseudo(self):
        """Gets the pseudo of this Deepfencev15enumerateFilters.  # noqa: E501

        Pseudo node or not  # noqa: E501

        :return: The pseudo of this Deepfencev15enumerateFilters.  # noqa: E501
        :rtype: list[bool]
        """
        return self._pseudo

    @pseudo.setter
    def pseudo(self, pseudo):
        """Sets the pseudo of this Deepfencev15enumerateFilters.

        Pseudo node or not  # noqa: E501

        :param pseudo: The pseudo of this Deepfencev15enumerateFilters.  # noqa: E501
        :type: list[bool]
        """

        self._pseudo = pseudo

    @property
    def public_ip_address(self):
        """Gets the public_ip_address of this Deepfencev15enumerateFilters.  # noqa: E501

        Public IP of host (for type `host`)  # noqa: E501

        :return: The public_ip_address of this Deepfencev15enumerateFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._public_ip_address

    @public_ip_address.setter
    def public_ip_address(self, public_ip_address):
        """Sets the public_ip_address of this Deepfencev15enumerateFilters.

        Public IP of host (for type `host`)  # noqa: E501

        :param public_ip_address: The public_ip_address of this Deepfencev15enumerateFilters.  # noqa: E501
        :type: list[str]
        """

        self._public_ip_address = public_ip_address

    @property
    def type(self):
        """Gets the type of this Deepfencev15enumerateFilters.  # noqa: E501

        Types of node  # noqa: E501

        :return: The type of this Deepfencev15enumerateFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Deepfencev15enumerateFilters.

        Types of node  # noqa: E501

        :param type: The type of this Deepfencev15enumerateFilters.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["host", "container", "container_image", "container_by_name", "process", "process_by_name"]  # noqa: E501
        if not set(type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `type` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(type) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Deepfencev15enumerateFilters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
