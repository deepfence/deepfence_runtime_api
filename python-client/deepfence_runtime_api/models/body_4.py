# coding: utf-8

"""
    Deepfence Runtime API v1.3

    Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider, container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.  # noqa: E501

    OpenAPI spec version: 1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body4(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'alert_count_threshold': 'int',
        'alert_level': 'str',
        'node_type': 'str'
    }

    attribute_map = {
        'action': 'action',
        'alert_count_threshold': 'alert_count_threshold',
        'alert_level': 'alert_level',
        'node_type': 'node_type'
    }

    def __init__(self, action=None, alert_count_threshold=None, alert_level=None, node_type=None):  # noqa: E501
        """Body4 - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._alert_count_threshold = None
        self._alert_level = None
        self._node_type = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if alert_count_threshold is not None:
            self.alert_count_threshold = alert_count_threshold
        if alert_level is not None:
            self.alert_level = alert_level
        if node_type is not None:
            self.node_type = node_type

    @property
    def action(self):
        """Gets the action of this Body4.  # noqa: E501

        action to take, when a policy is enforced  # noqa: E501

        :return: The action of this Body4.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Body4.

        action to take, when a policy is enforced  # noqa: E501

        :param action: The action of this Body4.  # noqa: E501
        :type: str
        """
        allowed_values = ["pause", "stop", "restart"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def alert_count_threshold(self):
        """Gets the alert_count_threshold of this Body4.  # noqa: E501

        When number of alerts (threshold) is this, policy will be executed  # noqa: E501

        :return: The alert_count_threshold of this Body4.  # noqa: E501
        :rtype: int
        """
        return self._alert_count_threshold

    @alert_count_threshold.setter
    def alert_count_threshold(self, alert_count_threshold):
        """Sets the alert_count_threshold of this Body4.

        When number of alerts (threshold) is this, policy will be executed  # noqa: E501

        :param alert_count_threshold: The alert_count_threshold of this Body4.  # noqa: E501
        :type: int
        """
        if alert_count_threshold is not None and alert_count_threshold > 999999999:  # noqa: E501
            raise ValueError("Invalid value for `alert_count_threshold`, must be a value less than or equal to `999999999`")  # noqa: E501
        if alert_count_threshold is not None and alert_count_threshold < 1:  # noqa: E501
            raise ValueError("Invalid value for `alert_count_threshold`, must be a value greater than or equal to `1`")  # noqa: E501

        self._alert_count_threshold = alert_count_threshold

    @property
    def alert_level(self):
        """Gets the alert_level of this Body4.  # noqa: E501

        Alert level  # noqa: E501

        :return: The alert_level of this Body4.  # noqa: E501
        :rtype: str
        """
        return self._alert_level

    @alert_level.setter
    def alert_level(self, alert_level):
        """Sets the alert_level of this Body4.

        Alert level  # noqa: E501

        :param alert_level: The alert_level of this Body4.  # noqa: E501
        :type: str
        """
        allowed_values = ["critical", "high", "medium", "low"]  # noqa: E501
        if alert_level not in allowed_values:
            raise ValueError(
                "Invalid value for `alert_level` ({0}), must be one of {1}"  # noqa: E501
                .format(alert_level, allowed_values)
            )

        self._alert_level = alert_level

    @property
    def node_type(self):
        """Gets the node_type of this Body4.  # noqa: E501

        Node type  # noqa: E501

        :return: The node_type of this Body4.  # noqa: E501
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this Body4.

        Node type  # noqa: E501

        :param node_type: The node_type of this Body4.  # noqa: E501
        :type: str
        """
        allowed_values = ["container", "host"]  # noqa: E501
        if node_type not in allowed_values:
            raise ValueError(
                "Invalid value for `node_type` ({0}), must be one of {1}"  # noqa: E501
                .format(node_type, allowed_values)
            )

        self._node_type = node_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body4):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
