# coding: utf-8

"""
    Deepfence Runtime API v1.3

    Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider, container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.  # noqa: E501

    OpenAPI spec version: 1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from deepfence_runtime_api.models.deepfencev13enumerate_filters import Deepfencev13enumerateFilters  # noqa: F401,E501


class Options3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filters': 'Deepfencev13enumerateFilters',
        'size': 'int',
        'start_index': 'int'
    }

    attribute_map = {
        'filters': 'filters',
        'size': 'size',
        'start_index': 'start_index'
    }

    def __init__(self, filters=None, size=None, start_index=None):  # noqa: E501
        """Options3 - a model defined in Swagger"""  # noqa: E501

        self._filters = None
        self._size = None
        self._start_index = None
        self.discriminator = None

        if filters is not None:
            self.filters = filters
        if size is not None:
            self.size = size
        if start_index is not None:
            self.start_index = start_index

    @property
    def filters(self):
        """Gets the filters of this Options3.  # noqa: E501


        :return: The filters of this Options3.  # noqa: E501
        :rtype: Deepfencev13enumerateFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this Options3.


        :param filters: The filters of this Options3.  # noqa: E501
        :type: Deepfencev13enumerateFilters
        """

        self._filters = filters

    @property
    def size(self):
        """Gets the size of this Options3.  # noqa: E501

        The numbers of vulnerabilities to return  # noqa: E501

        :return: The size of this Options3.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Options3.

        The numbers of vulnerabilities to return  # noqa: E501

        :param size: The size of this Options3.  # noqa: E501
        :type: int
        """
        if size is not None and size > 100000:  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `100000`")  # noqa: E501
        if size is not None and size < 1:  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._size = size

    @property
    def start_index(self):
        """Gets the start_index of this Options3.  # noqa: E501

        The number of items to skip before starting to collect the result set  # noqa: E501

        :return: The start_index of this Options3.  # noqa: E501
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this Options3.

        The number of items to skip before starting to collect the result set  # noqa: E501

        :param start_index: The start_index of this Options3.  # noqa: E501
        :type: int
        """
        if start_index is not None and start_index > 99999:  # noqa: E501
            raise ValueError("Invalid value for `start_index`, must be a value less than or equal to `99999`")  # noqa: E501
        if start_index is not None and start_index < 0:  # noqa: E501
            raise ValueError("Invalid value for `start_index`, must be a value greater than or equal to `0`")  # noqa: E501

        self._start_index = start_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Options3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
