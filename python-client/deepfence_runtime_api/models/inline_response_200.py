# coding: utf-8

"""
    Deepfence Runtime API v1.3

    Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider, container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.  # noqa: E501

    OpenAPI spec version: 1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'object',
        'error': 'str',
        'success': 'bool'
    }

    attribute_map = {
        'data': 'data',
        'error': 'error',
        'success': 'success'
    }

    def __init__(self, data=None, error=None, success=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501

        self._data = None
        self._error = None
        self._success = None
        self.discriminator = None

        if data is not None:
            self.data = data
        if error is not None:
            self.error = error
        if success is not None:
            self.success = success

    @property
    def data(self):
        """Gets the data of this InlineResponse200.  # noqa: E501

        User details  # noqa: E501

        :return: The data of this InlineResponse200.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this InlineResponse200.

        User details  # noqa: E501

        :param data: The data of this InlineResponse200.  # noqa: E501
        :type: object
        """

        self._data = data

    @property
    def error(self):
        """Gets the error of this InlineResponse200.  # noqa: E501

        Error message, if any. Otherwise `null`  # noqa: E501

        :return: The error of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this InlineResponse200.

        Error message, if any. Otherwise `null`  # noqa: E501

        :param error: The error of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def success(self):
        """Gets the success of this InlineResponse200.  # noqa: E501

        Success status  # noqa: E501

        :return: The success of this InlineResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this InlineResponse200.

        Success status  # noqa: E501

        :param success: The success of this InlineResponse200.  # noqa: E501
        :type: bool
        """

        self._success = success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
