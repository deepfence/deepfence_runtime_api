# coding: utf-8

"""
    Deepfence Runtime API v1.3

    Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider, container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.  # noqa: E501

    OpenAPI spec version: 1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Deepfencev13alertsFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_id': 'list[str]',
        'anomaly': 'list[str]',
        'container_image': 'list[str]',
        'container_name': 'list[str]',
        'host_name': 'list[str]',
        'resource_type': 'list[str]',
        'severity': 'list[str]'
    }

    attribute_map = {
        'alert_id': 'alert_id',
        'anomaly': 'anomaly',
        'container_image': 'container_image',
        'container_name': 'container_name',
        'host_name': 'host_name',
        'resource_type': 'resource_type',
        'severity': 'severity'
    }

    def __init__(self, alert_id=None, anomaly=None, container_image=None, container_name=None, host_name=None, resource_type=None, severity=None):  # noqa: E501
        """Deepfencev13alertsFilters - a model defined in Swagger"""  # noqa: E501

        self._alert_id = None
        self._anomaly = None
        self._container_image = None
        self._container_name = None
        self._host_name = None
        self._resource_type = None
        self._severity = None
        self.discriminator = None

        if alert_id is not None:
            self.alert_id = alert_id
        if anomaly is not None:
            self.anomaly = anomaly
        if container_image is not None:
            self.container_image = container_image
        if container_name is not None:
            self.container_name = container_name
        if host_name is not None:
            self.host_name = host_name
        if resource_type is not None:
            self.resource_type = resource_type
        if severity is not None:
            self.severity = severity

    @property
    def alert_id(self):
        """Gets the alert_id of this Deepfencev13alertsFilters.  # noqa: E501

        Alert ids  # noqa: E501

        :return: The alert_id of this Deepfencev13alertsFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this Deepfencev13alertsFilters.

        Alert ids  # noqa: E501

        :param alert_id: The alert_id of this Deepfencev13alertsFilters.  # noqa: E501
        :type: list[str]
        """

        self._alert_id = alert_id

    @property
    def anomaly(self):
        """Gets the anomaly of this Deepfencev13alertsFilters.  # noqa: E501

        Anomaly types  # noqa: E501

        :return: The anomaly of this Deepfencev13alertsFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._anomaly

    @anomaly.setter
    def anomaly(self, anomaly):
        """Sets the anomaly of this Deepfencev13alertsFilters.

        Anomaly types  # noqa: E501

        :param anomaly: The anomaly of this Deepfencev13alertsFilters.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["network_anomaly", "behavioral_anomaly", "system_audit", "syscall_anomaly"]  # noqa: E501
        if not set(anomaly).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `anomaly` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(anomaly) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._anomaly = anomaly

    @property
    def container_image(self):
        """Gets the container_image of this Deepfencev13alertsFilters.  # noqa: E501

        Container image names  # noqa: E501

        :return: The container_image of this Deepfencev13alertsFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._container_image

    @container_image.setter
    def container_image(self, container_image):
        """Sets the container_image of this Deepfencev13alertsFilters.

        Container image names  # noqa: E501

        :param container_image: The container_image of this Deepfencev13alertsFilters.  # noqa: E501
        :type: list[str]
        """

        self._container_image = container_image

    @property
    def container_name(self):
        """Gets the container_name of this Deepfencev13alertsFilters.  # noqa: E501

        Container names  # noqa: E501

        :return: The container_name of this Deepfencev13alertsFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this Deepfencev13alertsFilters.

        Container names  # noqa: E501

        :param container_name: The container_name of this Deepfencev13alertsFilters.  # noqa: E501
        :type: list[str]
        """

        self._container_name = container_name

    @property
    def host_name(self):
        """Gets the host_name of this Deepfencev13alertsFilters.  # noqa: E501

        Host names  # noqa: E501

        :return: The host_name of this Deepfencev13alertsFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this Deepfencev13alertsFilters.

        Host names  # noqa: E501

        :param host_name: The host_name of this Deepfencev13alertsFilters.  # noqa: E501
        :type: list[str]
        """

        self._host_name = host_name

    @property
    def resource_type(self):
        """Gets the resource_type of this Deepfencev13alertsFilters.  # noqa: E501

        Resource types  # noqa: E501

        :return: The resource_type of this Deepfencev13alertsFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Deepfencev13alertsFilters.

        Resource types  # noqa: E501

        :param resource_type: The resource_type of this Deepfencev13alertsFilters.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["processes", "files", "network"]  # noqa: E501
        if not set(resource_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `resource_type` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(resource_type) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._resource_type = resource_type

    @property
    def severity(self):
        """Gets the severity of this Deepfencev13alertsFilters.  # noqa: E501

        Alert severity  # noqa: E501

        :return: The severity of this Deepfencev13alertsFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Deepfencev13alertsFilters.

        Alert severity  # noqa: E501

        :param severity: The severity of this Deepfencev13alertsFilters.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["critical", "high", "medium", "low"]  # noqa: E501
        if not set(severity).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `severity` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(severity) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._severity = severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Deepfencev13alertsFilters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
