# coding: utf-8

"""
    Deepfence Runtime API v1.5

    Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider, container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.  # noqa: E501

    OpenAPI spec version: 1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Options4(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capture_percentage': 'int',
        'interface_name': 'str',
        'port_list': 'list[int]',
        'snap_length': 'int'
    }

    attribute_map = {
        'capture_percentage': 'capture_percentage',
        'interface_name': 'interface_name',
        'port_list': 'port_list',
        'snap_length': 'snap_length'
    }

    def __init__(self, capture_percentage=None, interface_name='All', port_list=None, snap_length=None):  # noqa: E501
        """Options4 - a model defined in Swagger"""  # noqa: E501

        self._capture_percentage = None
        self._interface_name = None
        self._port_list = None
        self._snap_length = None
        self.discriminator = None

        if capture_percentage is not None:
            self.capture_percentage = capture_percentage
        if interface_name is not None:
            self.interface_name = interface_name
        if port_list is not None:
            self.port_list = port_list
        if snap_length is not None:
            self.snap_length = snap_length

    @property
    def capture_percentage(self):
        """Gets the capture_percentage of this Options4.  # noqa: E501

        The percentage of traffic to capture  # noqa: E501

        :return: The capture_percentage of this Options4.  # noqa: E501
        :rtype: int
        """
        return self._capture_percentage

    @capture_percentage.setter
    def capture_percentage(self, capture_percentage):
        """Sets the capture_percentage of this Options4.

        The percentage of traffic to capture  # noqa: E501

        :param capture_percentage: The capture_percentage of this Options4.  # noqa: E501
        :type: int
        """
        if capture_percentage is not None and capture_percentage > 100:  # noqa: E501
            raise ValueError("Invalid value for `capture_percentage`, must be a value less than or equal to `100`")  # noqa: E501
        if capture_percentage is not None and capture_percentage < 20:  # noqa: E501
            raise ValueError("Invalid value for `capture_percentage`, must be a value greater than or equal to `20`")  # noqa: E501

        self._capture_percentage = capture_percentage

    @property
    def interface_name(self):
        """Gets the interface_name of this Options4.  # noqa: E501

        The interface to start packet capture (refer node details api / enumerate api for available interfaces for a node). To start on all interfaces, use 'All'  # noqa: E501

        :return: The interface_name of this Options4.  # noqa: E501
        :rtype: str
        """
        return self._interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """Sets the interface_name of this Options4.

        The interface to start packet capture (refer node details api / enumerate api for available interfaces for a node). To start on all interfaces, use 'All'  # noqa: E501

        :param interface_name: The interface_name of this Options4.  # noqa: E501
        :type: str
        """

        self._interface_name = interface_name

    @property
    def port_list(self):
        """Gets the port_list of this Options4.  # noqa: E501

        Ports to start packet capture  # noqa: E501

        :return: The port_list of this Options4.  # noqa: E501
        :rtype: list[int]
        """
        return self._port_list

    @port_list.setter
    def port_list(self, port_list):
        """Sets the port_list of this Options4.

        Ports to start packet capture  # noqa: E501

        :param port_list: The port_list of this Options4.  # noqa: E501
        :type: list[int]
        """

        self._port_list = port_list

    @property
    def snap_length(self):
        """Gets the snap_length of this Options4.  # noqa: E501

        Packet header length  # noqa: E501

        :return: The snap_length of this Options4.  # noqa: E501
        :rtype: int
        """
        return self._snap_length

    @snap_length.setter
    def snap_length(self, snap_length):
        """Sets the snap_length of this Options4.

        Packet header length  # noqa: E501

        :param snap_length: The snap_length of this Options4.  # noqa: E501
        :type: int
        """
        if snap_length is not None and snap_length > 65535:  # noqa: E501
            raise ValueError("Invalid value for `snap_length`, must be a value less than or equal to `65535`")  # noqa: E501
        if snap_length is not None and snap_length < 20:  # noqa: E501
            raise ValueError("Invalid value for `snap_length`, must be a value greater than or equal to `20`")  # noqa: E501

        self._snap_length = snap_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Options4):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
