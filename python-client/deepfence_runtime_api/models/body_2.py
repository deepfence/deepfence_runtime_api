# coding: utf-8

"""
    Deepfence Runtime API v1.5

    Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider, container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.  # noqa: E501

    OpenAPI spec version: 1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'block_duration': 'int',
        'host_name': 'str',
        'ip_address_list': 'list[str]',
        'node_policy_type': 'str',
        'packet_direction': 'str',
        'port_list': 'list[str]'
    }

    attribute_map = {
        'action': 'action',
        'block_duration': 'block_duration',
        'host_name': 'host_name',
        'ip_address_list': 'ip_address_list',
        'node_policy_type': 'node_policy_type',
        'packet_direction': 'packet_direction',
        'port_list': 'port_list'
    }

    def __init__(self, action=None, block_duration=None, host_name=None, ip_address_list=None, node_policy_type=None, packet_direction=None, port_list=None):  # noqa: E501
        """Body2 - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._block_duration = None
        self._host_name = None
        self._ip_address_list = None
        self._node_policy_type = None
        self._packet_direction = None
        self._port_list = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if block_duration is not None:
            self.block_duration = block_duration
        if host_name is not None:
            self.host_name = host_name
        if ip_address_list is not None:
            self.ip_address_list = ip_address_list
        if node_policy_type is not None:
            self.node_policy_type = node_policy_type
        if packet_direction is not None:
            self.packet_direction = packet_direction
        if port_list is not None:
            self.port_list = port_list

    @property
    def action(self):
        """Gets the action of this Body2.  # noqa: E501

        action to take, when a policy is enforced  # noqa: E501

        :return: The action of this Body2.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Body2.

        action to take, when a policy is enforced  # noqa: E501

        :param action: The action of this Body2.  # noqa: E501
        :type: str
        """
        allowed_values = ["block", "unblock"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def block_duration(self):
        """Gets the block_duration of this Body2.  # noqa: E501

        Number of seconds to block/allow the ip address  # noqa: E501

        :return: The block_duration of this Body2.  # noqa: E501
        :rtype: int
        """
        return self._block_duration

    @block_duration.setter
    def block_duration(self, block_duration):
        """Sets the block_duration of this Body2.

        Number of seconds to block/allow the ip address  # noqa: E501

        :param block_duration: The block_duration of this Body2.  # noqa: E501
        :type: int
        """
        if block_duration is not None and block_duration > 999999999:  # noqa: E501
            raise ValueError("Invalid value for `block_duration`, must be a value less than or equal to `999999999`")  # noqa: E501
        if block_duration is not None and block_duration < 1:  # noqa: E501
            raise ValueError("Invalid value for `block_duration`, must be a value greater than or equal to `1`")  # noqa: E501

        self._block_duration = block_duration

    @property
    def host_name(self):
        """Gets the host_name of this Body2.  # noqa: E501

        Host name  # noqa: E501

        :return: The host_name of this Body2.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this Body2.

        Host name  # noqa: E501

        :param host_name: The host_name of this Body2.  # noqa: E501
        :type: str
        """
        allowed_values = ["inbound", "outbound"]  # noqa: E501
        if host_name not in allowed_values:
            raise ValueError(
                "Invalid value for `host_name` ({0}), must be one of {1}"  # noqa: E501
                .format(host_name, allowed_values)
            )

        self._host_name = host_name

    @property
    def ip_address_list(self):
        """Gets the ip_address_list of this Body2.  # noqa: E501

        List of IP addresses  # noqa: E501

        :return: The ip_address_list of this Body2.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_address_list

    @ip_address_list.setter
    def ip_address_list(self, ip_address_list):
        """Sets the ip_address_list of this Body2.

        List of IP addresses  # noqa: E501

        :param ip_address_list: The ip_address_list of this Body2.  # noqa: E501
        :type: list[str]
        """

        self._ip_address_list = ip_address_list

    @property
    def node_policy_type(self):
        """Gets the node_policy_type of this Body2.  # noqa: E501

        Policy type - whitelist or blacklist  # noqa: E501

        :return: The node_policy_type of this Body2.  # noqa: E501
        :rtype: str
        """
        return self._node_policy_type

    @node_policy_type.setter
    def node_policy_type(self, node_policy_type):
        """Sets the node_policy_type of this Body2.

        Policy type - whitelist or blacklist  # noqa: E501

        :param node_policy_type: The node_policy_type of this Body2.  # noqa: E501
        :type: str
        """
        allowed_values = ["blacklist", "whitelist"]  # noqa: E501
        if node_policy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `node_policy_type` ({0}), must be one of {1}"  # noqa: E501
                .format(node_policy_type, allowed_values)
            )

        self._node_policy_type = node_policy_type

    @property
    def packet_direction(self):
        """Gets the packet_direction of this Body2.  # noqa: E501

        Packet direction - inbound or outbound  # noqa: E501

        :return: The packet_direction of this Body2.  # noqa: E501
        :rtype: str
        """
        return self._packet_direction

    @packet_direction.setter
    def packet_direction(self, packet_direction):
        """Sets the packet_direction of this Body2.

        Packet direction - inbound or outbound  # noqa: E501

        :param packet_direction: The packet_direction of this Body2.  # noqa: E501
        :type: str
        """
        allowed_values = ["inbound", "outbound"]  # noqa: E501
        if packet_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `packet_direction` ({0}), must be one of {1}"  # noqa: E501
                .format(packet_direction, allowed_values)
            )

        self._packet_direction = packet_direction

    @property
    def port_list(self):
        """Gets the port_list of this Body2.  # noqa: E501

        List of ports  # noqa: E501

        :return: The port_list of this Body2.  # noqa: E501
        :rtype: list[str]
        """
        return self._port_list

    @port_list.setter
    def port_list(self, port_list):
        """Sets the port_list of this Body2.

        List of ports  # noqa: E501

        :param port_list: The port_list of this Body2.  # noqa: E501
        :type: list[str]
        """

        self._port_list = port_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
