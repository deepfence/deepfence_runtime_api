# coding: utf-8

"""
    Deepfence Runtime API v1.3

    Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider, container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.  # noqa: E501

    OpenAPI spec version: 1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Deepfencev13vulnerabilityFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'container_name': 'list[str]',
        'cve_container_image': 'list[str]',
        'cve_container_image_id': 'list[str]',
        'cve_id': 'list[str]',
        'cve_severity': 'list[str]',
        'host_name': 'list[str]',
        'vulnerability_id': 'list[str]'
    }

    attribute_map = {
        'container_name': 'container_name',
        'cve_container_image': 'cve_container_image',
        'cve_container_image_id': 'cve_container_image_id',
        'cve_id': 'cve_id',
        'cve_severity': 'cve_severity',
        'host_name': 'host_name',
        'vulnerability_id': 'vulnerability_id'
    }

    def __init__(self, container_name=None, cve_container_image=None, cve_container_image_id=None, cve_id=None, cve_severity=None, host_name=None, vulnerability_id=None):  # noqa: E501
        """Deepfencev13vulnerabilityFilters - a model defined in Swagger"""  # noqa: E501

        self._container_name = None
        self._cve_container_image = None
        self._cve_container_image_id = None
        self._cve_id = None
        self._cve_severity = None
        self._host_name = None
        self._vulnerability_id = None
        self.discriminator = None

        if container_name is not None:
            self.container_name = container_name
        if cve_container_image is not None:
            self.cve_container_image = cve_container_image
        if cve_container_image_id is not None:
            self.cve_container_image_id = cve_container_image_id
        if cve_id is not None:
            self.cve_id = cve_id
        if cve_severity is not None:
            self.cve_severity = cve_severity
        if host_name is not None:
            self.host_name = host_name
        if vulnerability_id is not None:
            self.vulnerability_id = vulnerability_id

    @property
    def container_name(self):
        """Gets the container_name of this Deepfencev13vulnerabilityFilters.  # noqa: E501

        Container names  # noqa: E501

        :return: The container_name of this Deepfencev13vulnerabilityFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this Deepfencev13vulnerabilityFilters.

        Container names  # noqa: E501

        :param container_name: The container_name of this Deepfencev13vulnerabilityFilters.  # noqa: E501
        :type: list[str]
        """

        self._container_name = container_name

    @property
    def cve_container_image(self):
        """Gets the cve_container_image of this Deepfencev13vulnerabilityFilters.  # noqa: E501

        Container image names  # noqa: E501

        :return: The cve_container_image of this Deepfencev13vulnerabilityFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._cve_container_image

    @cve_container_image.setter
    def cve_container_image(self, cve_container_image):
        """Sets the cve_container_image of this Deepfencev13vulnerabilityFilters.

        Container image names  # noqa: E501

        :param cve_container_image: The cve_container_image of this Deepfencev13vulnerabilityFilters.  # noqa: E501
        :type: list[str]
        """

        self._cve_container_image = cve_container_image

    @property
    def cve_container_image_id(self):
        """Gets the cve_container_image_id of this Deepfencev13vulnerabilityFilters.  # noqa: E501

        Container image ids  # noqa: E501

        :return: The cve_container_image_id of this Deepfencev13vulnerabilityFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._cve_container_image_id

    @cve_container_image_id.setter
    def cve_container_image_id(self, cve_container_image_id):
        """Sets the cve_container_image_id of this Deepfencev13vulnerabilityFilters.

        Container image ids  # noqa: E501

        :param cve_container_image_id: The cve_container_image_id of this Deepfencev13vulnerabilityFilters.  # noqa: E501
        :type: list[str]
        """

        self._cve_container_image_id = cve_container_image_id

    @property
    def cve_id(self):
        """Gets the cve_id of this Deepfencev13vulnerabilityFilters.  # noqa: E501

        CVE Id  # noqa: E501

        :return: The cve_id of this Deepfencev13vulnerabilityFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._cve_id

    @cve_id.setter
    def cve_id(self, cve_id):
        """Sets the cve_id of this Deepfencev13vulnerabilityFilters.

        CVE Id  # noqa: E501

        :param cve_id: The cve_id of this Deepfencev13vulnerabilityFilters.  # noqa: E501
        :type: list[str]
        """

        self._cve_id = cve_id

    @property
    def cve_severity(self):
        """Gets the cve_severity of this Deepfencev13vulnerabilityFilters.  # noqa: E501

        CVE severity  # noqa: E501

        :return: The cve_severity of this Deepfencev13vulnerabilityFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._cve_severity

    @cve_severity.setter
    def cve_severity(self, cve_severity):
        """Sets the cve_severity of this Deepfencev13vulnerabilityFilters.

        CVE severity  # noqa: E501

        :param cve_severity: The cve_severity of this Deepfencev13vulnerabilityFilters.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["critical", "high", "medium", "low"]  # noqa: E501
        if not set(cve_severity).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `cve_severity` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(cve_severity) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._cve_severity = cve_severity

    @property
    def host_name(self):
        """Gets the host_name of this Deepfencev13vulnerabilityFilters.  # noqa: E501

        Host names  # noqa: E501

        :return: The host_name of this Deepfencev13vulnerabilityFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this Deepfencev13vulnerabilityFilters.

        Host names  # noqa: E501

        :param host_name: The host_name of this Deepfencev13vulnerabilityFilters.  # noqa: E501
        :type: list[str]
        """

        self._host_name = host_name

    @property
    def vulnerability_id(self):
        """Gets the vulnerability_id of this Deepfencev13vulnerabilityFilters.  # noqa: E501

        Vulnerability ids  # noqa: E501

        :return: The vulnerability_id of this Deepfencev13vulnerabilityFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._vulnerability_id

    @vulnerability_id.setter
    def vulnerability_id(self, vulnerability_id):
        """Sets the vulnerability_id of this Deepfencev13vulnerabilityFilters.

        Vulnerability ids  # noqa: E501

        :param vulnerability_id: The vulnerability_id of this Deepfencev13vulnerabilityFilters.  # noqa: E501
        :type: list[str]
        """

        self._vulnerability_id = vulnerability_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Deepfencev13vulnerabilityFilters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
