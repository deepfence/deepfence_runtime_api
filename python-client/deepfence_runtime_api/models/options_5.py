# coding: utf-8

"""
    Deepfence Runtime API v1.5

    Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider, container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.  # noqa: E501

    OpenAPI spec version: 1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Options5(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compliance_check_type': 'str'
    }

    attribute_map = {
        'compliance_check_type': 'compliance_check_type'
    }

    def __init__(self, compliance_check_type=None):  # noqa: E501
        """Options5 - a model defined in Swagger"""  # noqa: E501

        self._compliance_check_type = None
        self.discriminator = None

        if compliance_check_type is not None:
            self.compliance_check_type = compliance_check_type

    @property
    def compliance_check_type(self):
        """Gets the compliance_check_type of this Options5.  # noqa: E501

        Compliance check type. Not all options are available. Check applicable compliance scans first.  # noqa: E501

        :return: The compliance_check_type of this Options5.  # noqa: E501
        :rtype: str
        """
        return self._compliance_check_type

    @compliance_check_type.setter
    def compliance_check_type(self, compliance_check_type):
        """Sets the compliance_check_type of this Options5.

        Compliance check type. Not all options are available. Check applicable compliance scans first.  # noqa: E501

        :param compliance_check_type: The compliance_check_type of this Options5.  # noqa: E501
        :type: str
        """
        allowed_values = ["cis", "nist", "pcidss", "hipaa", "standard"]  # noqa: E501
        if compliance_check_type not in allowed_values:
            raise ValueError(
                "Invalid value for `compliance_check_type` ({0}), must be one of {1}"  # noqa: E501
                .format(compliance_check_type, allowed_values)
            )

        self._compliance_check_type = compliance_check_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Options5):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
