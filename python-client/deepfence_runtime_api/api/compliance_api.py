# coding: utf-8

"""
    Deepfence Runtime API v1.5

    Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider, container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.  # noqa: E501

    OpenAPI spec version: 1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from deepfence_runtime_api.api_client import ApiClient


class ComplianceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def applicable_compliance_scans(self, node_id, **kwargs):  # noqa: E501
        """Compliance API - Get Applicable Compliance Scans  # noqa: E501

        Get list of applicable compliance scans for this node (Applicable node type - `host`, `container`)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.applicable_compliance_scans(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: Node ID (refer enumerate api) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.applicable_compliance_scans_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.applicable_compliance_scans_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def applicable_compliance_scans_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Compliance API - Get Applicable Compliance Scans  # noqa: E501

        Get list of applicable compliance scans for this node (Applicable node type - `host`, `container`)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.applicable_compliance_scans_with_http_info(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: Node ID (refer enumerate api) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applicable_compliance_scans" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `applicable_compliance_scans`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node_id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/deepfence/v1.5/node/{node_id}/applicable_compliance_scans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def check_compliance_scan_status(self, node_id, compliance_check_type, **kwargs):  # noqa: E501
        """Compliance API - Check Compliance Scan Status  # noqa: E501

        Check status of compliance scan on this node (Applicable node type - `host`, `container`)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.check_compliance_scan_status(node_id, compliance_check_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: Node ID (refer enumerate api) (required)
        :param str compliance_check_type: Compliance check type. Not all options are available. Check applicable compliance scans first. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.check_compliance_scan_status_with_http_info(node_id, compliance_check_type, **kwargs)  # noqa: E501
        else:
            (data) = self.check_compliance_scan_status_with_http_info(node_id, compliance_check_type, **kwargs)  # noqa: E501
            return data

    def check_compliance_scan_status_with_http_info(self, node_id, compliance_check_type, **kwargs):  # noqa: E501
        """Compliance API - Check Compliance Scan Status  # noqa: E501

        Check status of compliance scan on this node (Applicable node type - `host`, `container`)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.check_compliance_scan_status_with_http_info(node_id, compliance_check_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: Node ID (refer enumerate api) (required)
        :param str compliance_check_type: Compliance check type. Not all options are available. Check applicable compliance scans first. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'compliance_check_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_compliance_scan_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `check_compliance_scan_status`")  # noqa: E501
        # verify the required parameter 'compliance_check_type' is set
        if ('compliance_check_type' not in params or
                params['compliance_check_type'] is None):
            raise ValueError("Missing the required parameter `compliance_check_type` when calling `check_compliance_scan_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node_id'] = params['node_id']  # noqa: E501
        if 'compliance_check_type' in params:
            path_params['compliance_check_type'] = params['compliance_check_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/deepfence/v1.5/compliance/{node_id}/{compliance_check_type}/scan_status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_compliance_scan_results(self, **kwargs):  # noqa: E501
        """Compliance API - Get/Delete Compliance Scan Results with filters  # noqa: E501

        Get/Delete compliance scan results with filters for node_id, compliance_check_type, etc  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.find_compliance_scan_results(async=True)
        >>> result = thread.get()

        :param async bool
        :param Options1 options: Options to get or delete compliance scan results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.find_compliance_scan_results_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_compliance_scan_results_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_compliance_scan_results_with_http_info(self, **kwargs):  # noqa: E501
        """Compliance API - Get/Delete Compliance Scan Results with filters  # noqa: E501

        Get/Delete compliance scan results with filters for node_id, compliance_check_type, etc  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.find_compliance_scan_results_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Options1 options: Options to get or delete compliance scan results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['options']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_compliance_scan_results" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'options' in params:
            body_params = params['options']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/deepfence/v1.5/compliance/scan_results', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_compliance_scan(self, node_id, **kwargs):  # noqa: E501
        """Compliance API - Start Compliance Scan  # noqa: E501

        Start compliance scan on this node (Applicable node type - `host`, `container`)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_compliance_scan(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: Node ID (refer enumerate api) (required)
        :param Options5 options: Options to start compliance scan
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.start_compliance_scan_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_compliance_scan_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def start_compliance_scan_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Compliance API - Start Compliance Scan  # noqa: E501

        Start compliance scan on this node (Applicable node type - `host`, `container`)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_compliance_scan_with_http_info(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: Node ID (refer enumerate api) (required)
        :param Options5 options: Options to start compliance scan
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'options']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_compliance_scan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `start_compliance_scan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node_id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'options' in params:
            body_params = params['options']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/deepfence/v1.5/node/{node_id}/start_compliance_scan', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
