# coding: utf-8

"""
    Deepfence Runtime API v1.5

    Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider, container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.  # noqa: E501

    OpenAPI spec version: 1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from deepfence_runtime_api.api_client import ApiClient


class VulnerabilityManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cve_status(self, node_id, **kwargs):  # noqa: E501
        """Node Control API - CVE Status  # noqa: E501

        CVE Status for a node (Applicable node type - `host`, `container`)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cve_status(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: Node ID (refer enumerate api) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cve_status_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cve_status_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def cve_status_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Node Control API - CVE Status  # noqa: E501

        CVE Status for a node (Applicable node type - `host`, `container`)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cve_status_with_http_info(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: Node ID (refer enumerate api) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cve_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `cve_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node_id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/deepfence/v1.5/node/{node_id}/cve_scan_status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_vulnerability(self, vulnerability_id, **kwargs):  # noqa: E501
        """Delete a vulnerability doc by vulnerability_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_vulnerability(vulnerability_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vulnerability_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_vulnerability_with_http_info(vulnerability_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_vulnerability_with_http_info(vulnerability_id, **kwargs)  # noqa: E501
            return data

    def delete_vulnerability_with_http_info(self, vulnerability_id, **kwargs):  # noqa: E501
        """Delete a vulnerability doc by vulnerability_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_vulnerability_with_http_info(vulnerability_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vulnerability_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vulnerability_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vulnerability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vulnerability_id' is set
        if ('vulnerability_id' not in params or
                params['vulnerability_id'] is None):
            raise ValueError("Missing the required parameter `vulnerability_id` when calling `delete_vulnerability`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vulnerability_id' in params:
            path_params['vulnerability_id'] = params['vulnerability_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/deepfence/v1.5/vulnerability/{vulnerability_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_vulnerability(self, **kwargs):  # noqa: E501
        """Get/Delete vulnerabilities by filter  # noqa: E501

        Get/Delete vulnerabilities by filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.find_vulnerability(async=True)
        >>> result = thread.get()

        :param async bool
        :param Options9 options: Options to get or delete vulnerabilities
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.find_vulnerability_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_vulnerability_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_vulnerability_with_http_info(self, **kwargs):  # noqa: E501
        """Get/Delete vulnerabilities by filter  # noqa: E501

        Get/Delete vulnerabilities by filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.find_vulnerability_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Options9 options: Options to get or delete vulnerabilities
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['options']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_vulnerability" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'options' in params:
            body_params = params['options']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/deepfence/v1.5/vulnerability', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vulnerability(self, vulnerability_id, **kwargs):  # noqa: E501
        """Get vulnerability by given vulnerability_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_vulnerability(vulnerability_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vulnerability_id: Vulnerability ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_vulnerability_with_http_info(vulnerability_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vulnerability_with_http_info(vulnerability_id, **kwargs)  # noqa: E501
            return data

    def get_vulnerability_with_http_info(self, vulnerability_id, **kwargs):  # noqa: E501
        """Get vulnerability by given vulnerability_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_vulnerability_with_http_info(vulnerability_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vulnerability_id: Vulnerability ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vulnerability_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vulnerability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vulnerability_id' is set
        if ('vulnerability_id' not in params or
                params['vulnerability_id'] is None):
            raise ValueError("Missing the required parameter `vulnerability_id` when calling `get_vulnerability`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vulnerability_id' in params:
            path_params['vulnerability_id'] = params['vulnerability_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/deepfence/v1.5/vulnerability/{vulnerability_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_cve(self, node_id, **kwargs):  # noqa: E501
        """Node Control API - Start CVE  # noqa: E501

        Start CVE on a node (Applicable node type - `host`, `container`)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_cve(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: Node ID (refer enumerate api) (required)
        :param object options: Options (If applicable)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.start_cve_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_cve_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def start_cve_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Node Control API - Start CVE  # noqa: E501

        Start CVE on a node (Applicable node type - `host`, `container`)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_cve_with_http_info(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: Node ID (refer enumerate api) (required)
        :param object options: Options (If applicable)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'options']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_cve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `start_cve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node_id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'options' in params:
            body_params = params['options']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/deepfence/v1.5/node/{node_id}/cve_scan_start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_cve(self, node_id, **kwargs):  # noqa: E501
        """Node Control API - Stop CVE  # noqa: E501

        Stop CVE on a node (Applicable node type - `host`, `container`)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.stop_cve(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: Node ID (refer enumerate api) (required)
        :param object options: Options (If applicable)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.stop_cve_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_cve_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def stop_cve_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Node Control API - Stop CVE  # noqa: E501

        Stop CVE on a node (Applicable node type - `host`, `container`)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.stop_cve_with_http_info(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: Node ID (refer enumerate api) (required)
        :param object options: Options (If applicable)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'options']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_cve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `stop_cve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node_id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'options' in params:
            body_params = params['options']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/deepfence/v1.5/node/{node_id}/cve_scan_stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
