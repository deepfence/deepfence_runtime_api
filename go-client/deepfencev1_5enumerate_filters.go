/*
 * Deepfence Runtime API v1.5
 *
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider, container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * API version: 1.5
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package deepfence_runtime_api

// Filter vulnerabilities by various fields (key value pairs)
type Deepfencev15enumerateFilters struct {

	// Container name (for type `container`, `container_image`)
	ContainerName []string `json:"container_name,omitempty"`

	// Host names
	HostName []string `json:"host_name,omitempty"`

	// Container image names (for type `container`, `container_image`)
	ImageName []string `json:"image_name,omitempty"`

	// Interface names (for type `host`)
	InterfaceNames []string `json:"interfaceNames,omitempty"`

	// Kernel version (for type `host`)
	KernelVersion []string `json:"kernel_version,omitempty"`

	// kubernetes namespace (for type `pod`, `kube_controller`, `kube_service`). Empty means all.
	KubernetesNamespace []string `json:"kubernetes_namespace,omitempty"`

	// kubernetes node type (for type `kube_controller`)
	KubernetesNodeType []string `json:"kubernetes_node_type,omitempty"`

	// Local networks in CIDR format (for type `host`)
	LocalNetworks []string `json:"local_networks,omitempty"`

	// Operating system (for type `host`)
	Os []string `json:"os,omitempty"`

	// Packet capture state (for type `host`)
	PacketCapture []string `json:"packet_capture,omitempty"`

	// Process ID (for type `process`)
	Pid int32 `json:"pid,omitempty"`

	// Parent process ID (for type `process`)
	Ppid int32 `json:"ppid,omitempty"`

	// Pseudo node or not
	Pseudo []bool `json:"pseudo,omitempty"`

	// Public IP of host (for type `host`)
	PublicIpAddress []string `json:"publicIpAddress,omitempty"`

	// Types of node
	Type_ []string `json:"type,omitempty"`
}
